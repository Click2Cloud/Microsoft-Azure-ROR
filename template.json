{
    "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "variables": {
        "webSiteName": "[concat('rubyonrails-', uniqueString(resourceGroup().id))]",
        "serverName": "[concat('postgresql-', uniqueString(resourceGroup().id))]",
        "databaseName": "dayplanner",
        "hostingPlanName": "[concat(variables('webSiteName'),'-plan')]",
        "searchServiceName": "[concat('gis-service', uniqueString(resourceGroup().id))]"
    },
    "parameters": {
        "appServicePlan": {
            "type": "string",
            "defaultValue": "D1",
            "allowedValues": [
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3"
            ],
            "metadata": {
                "description": "The pricing tier for the hosting plan."
            }
        },
        "appServicePlanLocation":{
            "type": "string",
            "defaultValue": "West US",
            "allowedValues": [
                "Southeast Asia",
                "West Europe",
                "West US"
            ],
            "metadata": {
                "description": "The app service plan location to use."
            }
        },
        "branch": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "The branch of the GitHub repository to use."
            }
        },
        "linuxFxVersion": {
            "type": "String",
            "defaultValue": "Docker|kapilthakkar/azure-rails"
        },
        "postgresServiceTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "metadata": {
                "description": "The pricing tier for the PostgreSQL service. Choose 'Basic' for workloads that scale with variable IOPS else 'Standard' for workloads that require on-demand scaling optimized for high throughput with provisioned IOPS."
            }
        },
        "postgresComputeUnit": {
            "type": "int",
            "defaultValue": 50,
            "allowedValues": [
                50,
                100,
                200,
                400,
                800
            ],
            "metadata": {
                "description": "The PostgreSQL database Compute Unit to use. For 'Basic' tier, expected values are 50 and 100. For 'Standard' tier, expected values are 100,200,400 and 800."
            }
        },
        "postgresStorageGB": {
            "type": "int",
            "defaultValue": 50,
            "metadata": {
                "description": "The PostgreSQL database storage size to use. For 'Basic' tier, maximum value is 1050 and for 'Standard' tier, maximum value is 10000 (Can be increased by 125 GB)"
            }
        },
        "postgresAdministratorLogin": {
            "type": "string",
            "metadata": {
                "description": "The PostgreSQL database administrator username to use."
            }
        },
        "postgresAdministratorPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The PostgreSQL database administrator password to use. The password must contain character from three of the following categories ï¿½ English uppercase letters, English lowercase letters, number (0-9), and non-alphanumeric characters (!, $, #, %)."
            }
        },
        "postgresVersion": {
            "type": "string",
            "defaultValue": "9.6",
            "allowedValues": [
                "9.5",
                "9.6"
            ],
            "metadata": {
                "description": "The PostgreSQL version to use."
            }
        },
        "postgresLocation": {
            "type": "string",
            "defaultValue": "West Europe",
            "allowedValues": [
                "East Asia",
                "East US",
                "East US 2",
                "Japan East",
                "Japan West",
                "North Central US",
                "North Europe",
                "South Central US",
                "Southeast Asia",
                "West Europe",
                "West US"
            ],
            "metadata": {
                "description": "The PostgreSQL server location to use."
            }
        },
        "searchServiceSku": {
            "type": "string",
            "defaultValue": "free",
            "allowedValues": [
                "free",
                "basic",
                "standard",
                "standard2",
                "standard3"
            ],
            "metadata": {
                "description": "The SKU of the search service you want to create. E.g. free or standard"
            }
        }
    },
    "resources": [
        {
            "apiVersion": "2016-02-01-privatepreview",
            "name": "[variables('serverName')]",
            "type": "Microsoft.DBforPostgreSQL/servers",
            "sku": {
                "tier": "[parameters('postgresServiceTier')]",
                "capacity": "[parameters('postgresComputeUnit')]",
                "size": "[mul(parameters('postgresStorageGB'), 1024)]"
            },
            "location": "[parameters('postgresLocation')]",
            "properties": {
                "version": "[parameters('postgresVersion')]",
                "administratorLogin": "[parameters('postgresAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('postgresAdministratorPassword')]",
                "storageMB": "[mul(parameters('postgresStorageGB'), 1024)]"
            },
            "resources": [
                {
                    "apiVersion": "2017-04-30-preview",
                    "name": "[variables('databaseName')]",
                    "type": "databases",
                    "location": "[parameters('postgresLocation')]",
                    "tags": {
                        "displayName": "PSQLDatabase"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('serverName'))]"
                    ],
                    "properties": {
                    }
                },
                {
                    "apiVersion": "2017-04-30-preview",
                    "name": "PSQLServerFirewallRule",
                    "type": "firewallrules",
                    "location": "[parameters('postgresLocation')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "endIpAddress": "255.255.255.255",
                        "startIpAddress": "0.0.0.0"
                    }
                },
                {
                    "type": "Microsoft.Insights/alertRules",
                    "name": "CPU-Alert",
                    "apiVersion": "2016-03-01",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "name": "CPU-Alert",
                        "description": "Default alert which notify when cpu percent is greater than 80%",
                        "isEnabled": "true",
                        "condition": {
                            "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
                            "dataSource": {
                                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                                "resourceUri": "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('serverName'))]",
                                "metricName": "cpu_percent"
                            },
                            "operator": "GreaterThan",
                            "threshold": "80",
                            "windowSize": "00:05:00",
                            "timeAggregation": "Average"
                        },
                        "actions": [
                            {
                                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                                "sendToServiceOwners": "true"
                            }
                        ]
                    }
                },
                {
                    "type": "Microsoft.Insights/alertRules",
                    "name": "Storage-Alert",
                    "apiVersion": "2016-03-01",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "name": "Storate_Alert",
                        "description": "Default alert which notify when storage percent is greater than 80%",
                        "isEnabled": "true",
                        "condition": {
                            "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
                            "dataSource": {
                                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                                "resourceUri": "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('serverName'))]",
                                "metricName": "storage_percent"
                            },
                            "operator": "GreaterThan",
                            "threshold": "80",
                            "windowSize": "00:05:00",
                            "timeAggregation": "Average"
                        },
                        "actions": [
                            {
                                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                                "sendToServiceOwners": "true"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "apiVersion": "2015-08-19",
            "name": "[variables('searchServiceName')]",
            "type": "Microsoft.Search/searchServices",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[toLower(parameters('searchServiceSku'))]"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "Name": "[parameters('appServicePlan')]"
            },
            "kind": "linux",
            "name": "[variables('hostingPlanName')]",
            "apiVersion": "2016-09-01",
            "location": "[parameters('appServicePlanLocation')]",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "reserved": true,
                "numberOfWorkers": "1"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "name": "[variables('webSiteName')]",
            "apiVersion": "2016-03-01",
            "location": "[parameters('appServicePlanLocation')]",
            "tags": {},
            "properties": {
                "siteConfig": {
                    "linuxFxVersion": "[parameters('linuxFxVersion')]"
                },
                "name": "[variables('webSiteName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/servers/', variables('serverName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('searchServiceName'))]"
            ],
            "resources": [
                {
                    "apiVersion": "2015-08-01",
                    "name": "web",
                    "type": "sourcecontrols",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites/', variables('webSiteName'))]"
                    ],
                    "properties": {
                        "RepoUrl": "[parameters('repoUrl')]",
                        "branch": "[parameters('branch')]",
                        "IsManualIntegration": true
                    }
                },
                {
                    "apiVersion": "2015-08-01",
                    "type": "config",
                    "name": "connectionstrings",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites/', variables('webSiteName'))]",
                        "[resourceId('Microsoft.DBforPostgreSQL/servers/', variables('serverName'))]"
                    ],
                    "properties": {
                        "DefaultConnection": {
                        "value": "[concat('host=', reference(variables('serverName')).fullyQualifiedDomainName, ';', ' dbname=', variables('databaseName'), ' user=', parameters('postgresAdministratorLogin'), '@', variables('serverName'), ' password=', uriComponent(parameters('postgresAdministratorPassword')), ' port=5432 sslmode=require')]",
                        "type": "PostgreSQL"
                        }
                    }
                },
                {
                    "name": "appsettings",
                    "type": "config",
                    "apiVersion": "2015-08-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites/', variables('webSiteName'))]",
                        "[resourceId('Microsoft.Search/searchServices', variables('searchServiceName'))]"
                    ],
                    "tags": {
                        "displayName": "WebAppSettings"
                    },
                    "properties": {
                        "searchPrimaryKey": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('searchServiceName')), '2015-08-19').primaryKey]",
                        "searchServiceUri": "[concat('https://', variables('searchServiceName'), '.search.windows.net')]"
                    }
                }
            ]
        }        
    ]
}